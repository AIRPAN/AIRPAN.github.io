<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python的语法基础]]></title>
    <url>%2F2019%2F05%2F22%2Fpython%2F01.python%E7%9A%84%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[python的语法基础基础语法 编码默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 查看数据类型 使用type()函数用法：type(变量名) 获取变量在内存中的id标识 使用id()函数用法：id(变量名) 系统中保留关键字：import keywordprint (keyword.kwlist) 多行语句Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如： 1234567total = item_one + \ item_two + \ item_three # 在 [], &#123;&#125;, 或 () 中的多行语句，不需要使用反斜杠(\)total = [&apos;item_one&apos;, &apos;item_two&apos;, &apos;item_three&apos;, &apos;item_four&apos;, &apos;item_five&apos;] 等待用户输入：input() 同一行显示多条语句Python可以在同一行中使用多条语句，语句之间使用分号(;)分割。1234实例(Python 3.0+)#!/usr/bin/python3 import sys; x = &apos;runoob&apos;; sys.stdout.write(x + &apos;\n&apos;) Python的数据类型Python中可以自定义数据类型,可以具有无限种数据类型。系统默认提供6个标准数据类型： Number类型(数字) String类型（字符串） List类型 (列表) tuple类型(元组) Dictionary类型(字典) Set类型（集合） Number类型Number类型主要包含数学相关的数据：一共分为4种小类型： 整型整型就是整数。包括正整数负整数和0二进制（0b开头）变量 = 0b10101八进制（0o开头）变量 = 0o777十进制（不需要）变量 = 250十六进制（0x开头）变量 = 0xabcd 浮点型浮点型就是小数。使用小数表示浮点数 float1 = 3.141592653科学计数法表示浮点数float2 = 314e-2 # 314*10的-2次方 复数什么是复数。 复数由实数和虚数两部分组成表达式: 163 + 2j使用复数功能结构: com2 = complex(15,3) 布尔类类型布尔值就是表示确定或者否定的数据类型，只有2个值：True和False 在python当中没有真正的布尔类型，而是使用数字0来表示False，数字1表示True，所以bool是Number类型 String类型字符串就是文字类型 字符串的声明： 单引号声明字符串 变量 = ‘值’ 双引号声明字符串 变量 = “值” 三引号声明变量 变量 = ‘’’值’’’ 变量 = “””值””” 三引号声明字符串的方式适合大数据的字符串、多行数据 字符串相关操作 常用字符串连接符号: +字符复制操作: *[] 通过指定位置（索引）来获取指定位置的字符[:] 取片操作（不包含结束位置）注意事项：单引号中不可以直接使用单引号双引号中不可以直接使用双引号三引号中可以随意使用单双引号 字符串的转义操作：(在行尾时) 续行符\ 反斜杠符号\’ 单引号\” 双引号\a 响铃\b 退格(Backspace)\e 转义\000 空\n 换行\v 纵向制表符\t 横向制表符\r 回车\f 换页\oyy 八进制数，yy代表的字符，例如：\o12代表换行\xyy 十六进制数，yy代表的字符，例如：\x0a代表换行\other 其它的字符以普通格式输出 r 防止转义:print(r’hello\nrunoob’) str 的内置函数 capitalize() 首字母大写格式： str.capitalize()返回值：首字母大写的字符串，仅把整个字符串的第一个字符大写 upper() 将所有英文字符变为大写格式：str.upper()返回值：返回所有英文字符大写的字符串 lower() 将所有英文字符变为小写格式：str.lower()返回值：返回所有英文字符小写的字符串 swapcase() 大小写互相转换格式：str.swapcase()返回值：转换之后的字符串 title() 按照标题格式进行大小写转换（每个单词首字母大写)格式：str.title()返回值：返回所有英文单词首字母大写的字符串 len() 计算字符串的字符个数,以后也可以用于计算元组列表等序列格式: len(str)返回值:整型 count() 计算一个字符串中出现指定字符串的次数格式：str.count(‘查找的字符串’[,开始位置])返回值:返回整型 find() 查找字符串中是否具有指定的字符串,查找不到返回-1格式：str.find(查找的字符串[，开始位置])返回值:第一次出现的位置 index() 查找字符串中是否具有指定的字符串，查找不到直接报错格式：str.index(查找的字符串[，开始位置])返回值:第一次出现的位置 startswith() 检测字符串是否以指定的字符串开头格式： str.startswith(‘查找的字符串’[，开始位置])返回值：布尔值 endswith() 检测字符串是否以指定的字符串结尾格式： str.endswith(‘查找的字符串’[，开始位置])返回值：布尔值 isupper() 检测字符串中字母是否都是大写字母格式：str.isupper()返回值：布尔值 islower() 检测字符串中的字母是否都是小写字母格式：str.islower()返回值：布尔值 isalnum() 检测一个字符串是否都是有数字或者是否都是有字母组成格式：str.isalnum()返回值:布尔值注意：空字符串返回False isalpha() 检测字符串是否都是有字母类型构成，汉字作为字母处理格式：str.isalpha()返回值：布尔值注意：空字符串返回False isdigit() 检测字符串是否由纯数字字符组成格式：str.isdigit()返回值：布尔值注意：空字符串返回False isspace() 检测字符串是否完全由空白字符组成格式：str.isspace()返回值：布尔值注意：回车，换行，缩进，空格都可以当作空白字符，空字符串是False istitle() 检测字符串是否符合title()的结果，每个单词首字母大写格式：str.istitle()返回值：布尔值 isnumeric() 检测字符串是否有纯数字构成格式：str.isnumeric()返回值：布尔值 isdecimal() 检测字符串是否完全由十进制字符组成格式：str.isdecimal()返回值：布尔值 split() 使用指定的字符将字符串卷拆解成多个字符串格式： str.split(‘用于拆解的字符串’)返回值：列表类型 splitlines() 使用\n，\r或者\r\n切割字符串格式：str.splitlines()返回值：列表类型 join() 使用指定的字符串将序列中的内容组成新的字符串格式：连接字符串.join(序列)返回值：组成的新的字符串 zfill() 0填充操作格式： str.zfill(长度)返回值：填充0的字符串注意：1.填充结果原有内容靠右对齐，前面位数不足使用0来补充，常用于数字类型字符串。 center() 将字符串进行居中操作，并且在空白处进行填充格式： str.center(未来字符宽度,空白填充字符)返回值：新的字符串 ljust（） 将字符串进行左对齐操作，并且在空白处进行填充格式： str.ljust(未来字符宽度,空白填充字符)返回值：新的字符串 rjust() 将字符串进行右对齐操作，并且在空白处进行填充格式： str.rjust(未来字符宽度,空白填充字符)返回值：新的字符串 lstrip() 去掉字符串左侧的空白格式： str.lstrip()返回值：字符串 rstrip()去掉字符串右侧的空白格式： str.rstrip()返回值：字符串 strip()去掉字符串两侧的空白格式： str.strip()返回值：字符串 replace() 字符串替换操作格式： str.replace(被替换的字符串,替换字符串)返回值：替换之后的字符串、 maketrans() 制作一个字符串映射表，为了给translate函数使用格式:str.maketrans（’被替换的字符串’,’替换字符串’）返回值：字典类型，被替换字符串组成键，替换字符串组成值注意： 两个参数的字符串个数必须一一对应，这里的str不是值字符串，而是真正的str，也可以写空字符串代替str（字符串都是str制作的） translate() 进行字符串翻译操作，类似转换格式：str.translate(映射表)返回值:新的字符串注意:translate用于多字符替换，replace用于长字符串替换 string模块相关内容 获取所有的空白字符:print (string.whitespace) 获取ascii码的所有字母表（包含大写和小写）:print(string.ascii_letters) 获取ascii码中的所有大写字母:print(string.ascii_uppercase) 获取ascii码中所有的小写字母:print(string.ascii_lowercase) 获取ascii码中所有10进制数字字符:print(string.digits) 获取八进制所有数字字符:print(string.octdigits) 获取十六进制的所有数字字符print(string.hexdigits) 打印所有可见字符print(string.printable) 打印所有标点符号print(string.punctuation) List类型 (列表)列表的定义和访问： 列表的定义变量 = [值,值,值….]列表的标志符号是[] 列表的访问操作列表变量：[索引位置]添加列表操作：不可以使用索引方式添加修改列表操作：列表变量[索引位置] = 新值删除列表操作：del 列表变量[索引位置] 列表的序列操作 索引操作格式： 列表变量[索引] 分片操作列表[:]表示获取列表的所有数据列表[开始索引：]表示丛开始索引位置截取到列表的最后列表[:结束索引]表示从列表的开头截取到结束索引位置之前，不包含结束位置列表[开始索引:结束索引]表示从列表的开始索引位置截取到结束索引位置之前，不包含结束位置列表[开始索引:结束索引:跳步值]表示从开始索引位置到结束索引位置之间，不包含索引位置，并且获取数据时索引每次+跳步值来获取，默认跳步值为1 序列相加格式：列表 = 列表1 + 列表2 列表相乘格式： 列表 = 列表1 * 整数结果：将列表重复N分组成新的列表注意： 数字必须为整数 成员资格运算格式1：数据 in 列表作用：检测数据是否在列表当中返回值：布尔值格式2：数据 not in 列表作用：检测数据是不是不在列表当中返回值：布尔值 最大、最小、长度计算 列表的遍历 for i in 列表: while i &lt; length: 双层列表循环列表 = [[值1,值2],[值1,值2]，[值1,值2]…]for 变量1,变量2 in 列表: 列表内涵： list content 简单的列表内涵：格式：[[变量 for [变量 in 列表]作用：遍历列表中的数据并且组成新的列表，如果需要改变原有数据，在最开始i处修改结果：新的列表 带有判断的列表内涵格式 [变量 for 变量 in 列表 判断条件]作用：遍历列表中的数据，根据判断条件取出符合条件的数据组成新的列表结果:新的列表 多循环带判断的列表内涵格式：[[变量1+变量2 for 变量1 in 列表1 for 变量2 in 列表2 判断条件]作用：将列表1中和列表2中每个数据进行操作，但是必须在符合判断条件的前提下进行。结果：新的列表 序列函数 len() 获取列表的数据长度格式：len(列表)返回值：整型 max() 获取列表中的最大值格式：max(列表)返回值：列表中的最大值 min() 获取列表的最小值格式：min(列表)返回值：列表中的最小值 list() 将其他序列类型转化为列表格式：list(序列)返回值：列表 列表专用函数 append() 在列表的最后追加新数据格式： 列表.append(数据)返回值：无注意：该操作直接改变原有列表 insert() 在列表指定的位置插入数据格式：列表.insert（索引,数据）返回值：无注意：该操作直接改变原有列表 pop() 在列表中移除一个元素格式：列表.pop()返回值:移除掉的元素注意：移除列表最后的元素 格式：列表.pop(索引)返回值：:移除掉的元素注意：移除列表中指定索引的元素 remove() 在列表中移除指定的值的元素格式:列表.remove(值)返回值：无注意：该操作直接改变原有列表 clear() 清空列表格式：列表.clear()返回值：无注意：该操作直接改变原有列表 reverse() 列表反转格式：列表.reverse（）返回值：无注意：该操作直接改变原有列表 extend() 在原有列表最后追加新的序列格式:列表.extend(序列类型)返回值： 无注意：该操作直接改变原有列表 count() 计算指定值在列表中出现的次数格式: 列表.count(值)返回值：整数 copy() 复制原有列表格式: 列表.copy()返回值：新的列表 tuple类型(元组)元组的创建和特征 元组的创建创建空元组:变量 = ()创建单个数据的元组: 变量 = (值,) 或 变量 = 值,创建多个数据的元组: 变量 = (值,值，值…) 或者 变量 = 值,值，值… 元组的特征元组的关键符号是逗号而不是小括号。元组不具备修改功能。是一种特殊的列表。 序列操作 索引操作元组[索引位置] 分片操作元组[:]获取元素的所有数据元组[开始索引:]获取开始索引位置到最后的所有数据元组[:结束索引]获取元组开头到结束索引位置之前的所有数据（不包含结束位置）元组[开始索引:结束索引]获取元素开始索引位置到结束索引位置之间的所有数据（不包含结束位置）元组[开始索引:结束索引:跳步值]获取元素开始位置到结束索引之间的指定间隔的数据数据（不包含结束位置） 相加操作新元组 = 元组 + 元组 相乘操作新元组 = 元组 * 整数 成员检测格式1:数据 in 元组作用：检测数据是不是在元组当中返回值：布尔值格式2:数据 not in 元组检测数据是否不在元组当中返回值：布尔值 - 元组的遍历 for i in 元组： for i,j in 元组： 元组的函数 len() 获取元组中数据的长度格式： len(元组)返回值：整数 max() 返回元组中最大的值格式：max(元组) min() 返回元组中的最小值格式：min(元组) tuple() 将其他序列转化为元组类型格式： tuple(任意序列) 元组的方法 count() 计算指定数据出现的次数格式:元组.count(查找的数据)返回值：整数 index() 获取指定值在元组中的索引位置格式：元组.index(查找的数据)返回值：索引位置或者错误信息 变量交换 （元组特殊用法）a,b = b,a Dictionary类型(字典) 字典格式：变量 = {键:值,键:值….} 键就是标志或者说是目录,值就是真实的值 字典的标志符号是{} 字典的创建和特征 创建空字典变量 = {} 或者 变量 = dict() 创建有数据的字典变量 = {键:值,键:值,键:值…}变量 = dict({键:值,键:值,键:值…})变量 = dict(键=值,键=值,键=值…)变量 = dict([(键,值),(键,值),（键,值）…])变量 = dict(zip((键，键，键….),(值,值，值…))) 字典的特征字典也是序列类型但是是无序序列，所以分片操作无法使用字典中每个数据都由键和值两部分组成：值：任意数据都可以当作值来使用键：可以使用 int，float,str,tuple，冰冻集合，但是list，set，dict等不可以使用 字典的基本操作 访问数据：字典变量[键] 添加数据字典变量[新键] = 值 修改数据字典变量[键] = 新值 删除数据del 字典变量[键] 序列操作 检测数据是否在字典的键中格式：数据 in 字典 检测数据是否不再字典的键中格式：数据 not in 字典 遍历操作 键遍历操作for k in 字典: 键值遍历for k,v in 字典.items()： 字典内涵 基本的字典内涵变量= {key:value for key,value in 字典.items()} 带有条件的字典内涵变量 = {key:value for key,value in 字典.items() if 条件} 字典函数 len() 计算字典的长度格式： len(字典)返回值:字典的长度 max() 获取字典中的最大值 （默认比较字典的键）格式:max(字典)返回值：最大的键 min() 获取字典中的最小值（默认比较字典的键）格式：min(字典)返回值:最小值 dict() 将其他序列转化为字典详情请看字典的定义 str(字典) 返回字典的字符串格式 字典方法 clear() 清空字典格式：字典.clear()返回值：无 None注意：直接改变原有字典 items() 获取字典的键值对组成的元组格式格式：字典.items()返回值：将键值对变成元组的列表形式。注意:返回的数据是内建的dict_items类型，专用于字典的转换中间类型 keys() 获取字典中所有键组成的序列，常用语字典遍历格式： 字典.keys()返回值:返回所有键的组合注意：类型为 dict_keysL类型，也是一种字典转换的中间类型 values() 获取字典中所有值组成的序列，常用语字典遍历格式： 字典.values()返回值：所有值的组合注意：类型为dict_values类型，也是一种字典转换的中间类型 get（） 根据指定的键获取值格式：字典.get(键,默认值)返回值：字典键对应的数据注意：如果键不存在与字典中，则返回默认值而不会报错 pop() 根据键从字典中删除数据格式:字典.pop(键)返回值：删除的键对应的值注意：pop在字典中使用必须有参数，因为字典无序序列，直接改变原有字典 copy() 赋值一个字典格式：字典.copy()返回值：复制出来的新的字典 setdefault() 设置字典中不存在的键的值格式：字典.setdefault(键,默认值)返回值：设置时的默认值注意：如果设置时键已经存在于字典中，则不进行任何操作，直接改变原有字典 fromkeys() 使用指定的序列作为键,使用一个值作为字典的所有值格式:字典.fromkeys(序列,值)返回值：由序列作为字典的键，由值作为所有键对应的值组成的字典 update() 使用字典更新另外一个字典格式：字典1.update(字典2)返回值：无注意:直接改变原有字典 Set类型（集合）集合的创建和特征 创建空集合变量 = set() 创建多个数据的集合变量 = {值,值,值….} 集合的特征集合是一种无序的数据类型，无法通过索引和分片进行操作集合是内部元素绝对唯一的数据，常常用于去掉重复数据集合的数据，str，int，float,bool,tuple，冰冻集合。 集合序列操作 检测数据是否在集合当中格式：数据 in 集合 检测数据是否不在集合当中格式：数据 not in 集合 集合遍历操作 for i in 集合: for i,j in 集合:集合 = {（值1,值2..）,(值3,值4..)…} 集合内涵 普通集合内涵新集合 = {变量 for 变量 in 集合} 带条件的集合内涵新集合 = {变量 for 变量 in 集合 if 条件} 多循环的集合内涵新集合 = {变量1+变量2 for 变量1 in 集合1 for 变量2 in 集合2 if 条件} 集合函数 len() 获取集合中元素的个数格式:len(集合)返回值：整数 max() 获取集合中最大的元素格式:max(集合)返回值：集合中最大的值 min() 获取集合中最小的元组格式：min(集合)返回值：集合中的最小值 set() 将其他序列转化为集合类型格式：set(序列)返回值：集合类型 集合方法 add() 向集合中添加数据格式： 集合.add(数据)返回值：无注意：直接改变原有集合，已存在的数据无法添加 clear() 清空集合格式：集合.clear()返回值：无注意：直接改变原有集合 copy() 集合复制格式:集合.copy()返回值:原集合所有数据组成的新的集合 remove() 移除指定的值格式:集合.remove(值)返回值：无注意：直接改变原有集合，如果要删除的值不存在，就报错 discard()移除集合中指定的值格式:集合.discard(值)返回值：无注意：直接改变原有集合，如果要删除的值不存在，就不作任何操作 pop() 随机移除一个元素格式：集合.pop（）返回值：被移除的元素注意：随机移除元素，没啥规律 intersection() 计算两个值集合之间的交集格式： 集合1.intersection(集合2)返回值：新的集合 difference() 计算两个集合之间的差集格式： 集合1.difference(集合2)返回值:新的集合 union() 计算两个集合之间的并集操作格式：集合1.union（集合2）返回值：新的集合 issubset() 检测一个集合是否是另外一个集合的子集格式：集合1.issubset(集合2)返回值：布尔值 issuperset() 检测一个集合是否是另外一个和集合的超集格式：集合1.issuperset(集合2)返回值：布尔值 difference_update（） 计算集合1和集合2的差集并且将结果赋值给集合1格式：集合1.difference_update(集合2)返回值:无注意：操作结果直接赋值给集合1 intersection_update() 计算集合1和集合2的交集并且将结果赋值给集合1格式：集合1.intersection_update(集合2)返回值：无注意:操作结果直接赋值给集合1 update() 计算集合1和集合2的并集并且将并集结果赋值给集合1格式：集合1.update(集合2)返回值:无注意:操作结果直接赋值给集合1 冰冻集合/固定集合 frozen 冰冻集合就是不可以进行任何修改相关操作的集合 创建冰冻集合创建空的冰冻集合: 变量 = frozenset()创建具有数据的冰冻集合: 变量 = fronzenset(一个序列) 操作方法和函数冰冻集合的操作相关函数和方法同集合类型一样。只是不可以使用修改集合相关的方法和函数。 注意:frozenset 和普通的集合一样没有什么本质区别，能够使用的函数数量不一样，仅此而已哦 数据类型转换自动类型转换类型转换会向着更加精确的类型进行转换 强制类型转换强制类型转换是根据程序需要，由程序员通过操作强制改变数据的类型。 int（) 强制将数据转化为整型纯数字字符串转化为整型时，类型改变，值不变只有纯整数字符串才可以转换，其他均不可以浮点型可以转化为整型，去掉小数点后面的部分 float() 强制将数据转化为浮点型整数字符串和浮点数字符串均可以转化为浮点型转化过程中类型改变，值不变整型也可以用于浮点型转换 complex（） 生成一个复数 bool() 强制将数据转化为布尔值能够转化为布尔值False的情况：① 字符串 空字符串 ② 整型 0 ③浮点型 0.0 ④ 复数 0+0j ⑤ 布尔值 Flase ⑥ 列表 [] 空列表 ⑦ 元组 () 空元组 ⑧ 字典 {} 空字典 ⑨ 集合 set（）空集合 str() 字符串类型转换所有数据类型都可以转换为字符串，转换规则就是在原有数据基础上加了引号变成了字符串的格式。例如：[1，2，3] =“[1，2，3]” list() 将其他数据转换为列表类型能够进行list转换的数据类型：str 、set 、tuple 、 dict （iterable数据） tuple() 将其他数据类型转换为元组类型能够进行list转换的数据类型：str 、set 、tuple 、 dict （iterable数据） dict() 将其他数据转化为字典类型字典类型转换可以转化的类型有三种：list 、tuple 、set以上所有类型的每个数据必须由元组组成，并且每个元组必须有2个值例子：{(‘aa’,’AA’),(‘bb’,’BB’),(‘cc’,’CC’)}[(‘aa’,’AA’),(‘bb’,’BB’),(‘cc’,’CC’)]((‘aa’,’AA’),(‘bb’,’BB’),(‘cc’,’CC’)) set() 集合类型转换能够进行list转换的数据类型：str 、set 、tuple 、 dict （iterable数据） 字符串的格式化利用百分号格式化 %d 此处应该放入一个整数s = “i am %d years old”print (s%18) %s 放入一个字符串s = “i am %s”print (“i love %s”%”KI”)print (s%”KIOVEN”) 如果出现多个占位符，则相应内容需要用括号括起来s = “i am %s,i am %d years old”print (s%(“ouwen”,18)) 利用format格式化 以{}和： 代替%号，后面用format带参数完成s = ‘i love {}’.format(“you”)print (s) s = “i am {1} years old,i love {0} and {1} years old”.format(“tulingxueyuan”,24)print (s) 表达式和运算符表达式由变量、运算符、数字、数字分组符号（括号）等以能求得数值的有意义排列方法所得的组合。 运算符的分类 算术运算 比较运算/关系运算 赋值运算 逻辑运算 位运算 成员运算 身份运算 算数运算+ - * / %(取余) //(地板除，取商) **幂运算 注意： python中没有自增自减的 ++ 或者– 运算 混合计算时，Python会把整型转换成为浮点数 比较运算== ！= &gt; &lt; &gt;= &lt;= 注意：在python中没有 === 和 ！==运算，只要类型不同就是不等于 赋值运算= += -= *= /= //= **= 注意：a = b 转换之后的表达式为 a = a b 无论何种赋值运算都符合这个格式 逻辑运算逻辑运算是布尔值之间的运算and 与运算：有假则假or 或运算：有真则真not 非运算:真变假，假变真 位运算位运算就是在二进制基础上进行的逻辑运算，将0视为False，将1视为True进行的运算 &amp; 按位与运算 | 按位或运算 ～ 按位非运算注意：按位非运算之后计算机会进行反码和补码的相关操作之后进行数据存储 ^ 按位抑或运算:将数据转化为2进制数据然后进行每个位上的逻辑抑或运算变量 = 值1 ^ 值2 左移运算:将数据转化为二进制之后，将二进制数据的所有数据向左移动指定的位数变量 = 值 &lt;&lt; 移动位数特征：左移N位相当于乘以2的N次方，此方法速度远高于乘法 右移运算将数据转化为二进制之后，将二进制数据的所有数据向右移动指定的位数，如果数据移除右侧边界，则会被删除，实际上相当于采用了地板除！变量 = 值 &gt;&gt; 移动位数特征：右移N位相当于除以2的N次方，舍弃小数部分。此方法速度远高于除法 成员运算 in 检测一个值在指定的序列类型里面格式： 值 in 可迭代序列 not in 检测一个值是否不再指定的序列里面格式： 值 not in 可迭代序列 身份运算 is 检测值1是不是和值2在内存中是否是同一个值，类似id()功能格式: 数据1 is 数据2 is not 检测值1是不是和值2在内存中是否不是同一个值，类似id()功能格式: 数据1 is not 数据2 检测数据归属 type() 测试时可以使用，开发尽量避免使用格式：type(变量) isinstance() 检测一个数据是否由指定的类型创建格式：isinstance(变量，检测的类型) 运算优先级问题1234567891011121314** 指数 (最高优先级) ~ + - 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) * / % // 乘，除，取模和取整除 + - 加法减法 &gt;&gt; &lt;&lt; 右移，左移运算符 &amp; 位 'AND' ^ | 位运算符 &lt;= &lt; &gt; &gt;= 比较运算符 == != 等于运算符 = %= /= //= -= += *= **= 赋值运算符 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 注意：我们并不推荐死记硬背优先级，在实际使用中最好使用()解决优先级问题]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F22%2Ftest%2Fv2%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F22%2Ftest%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
